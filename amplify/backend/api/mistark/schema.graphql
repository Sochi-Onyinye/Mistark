type Business @model @auth(rules: [{allow: public}]) @searchable {
  id: ID!
  name: String!
  description: String!
  address: String!
  location: Location!
  businessOwnerID: ID @index(name: "byBusinessOwner")
  businessOwner: BusinessOwner @hasOne(fields: ["businessOwnerID"])
  reviews: [Review]! @hasMany(indexName: "byBusiness", fields: ["id"])
  services: [Service]! @hasMany(indexName: "byBusiness", fields: ["id"])
  categoryID: ID
  category: BusinessCategory @hasOne(fields: ["id"])
  profileImage: String!
  images: [String]
}

type Location {   
  lat: Float!   
  lon: Float! 
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String!
  lastName: String!
  username: String!
  email: String!
}

type BusinessOwner @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String!
  lastName: String!
  businesses: [Business]! @hasMany(indexName: "byBusinessOwner", fields: ["id"])
  email: String!
}

type Review @model @auth(rules: [{allow: public}]) {
  id: ID!
  userID: ID!
  user: User @hasOne(fields: ["userID"])
  overallRating: Int!
  BusinessID: ID! @index(name: "byBusiness", sortKeyFields: ["overallRating"])
  Business: Business @hasOne(fields: ["BusinessID"])
  content: String!
}

type Service @model @auth(rules: [{allow: public}]) @searchable {
  id: ID!
  title: String!
  description: String!
  price: Float!
  image: String!
  businessID: ID! @index(name: "byBusiness")
  businessOwner: Business @hasOne(fields: ["businessID"])
}

type BusinessCategory @model @auth(rules: [{allow: public}]) @searchable {
  id: ID!
  categoryName: String!
  categoryDescription: String!
}


input LocationInput {
  lat: Float!
  lon: Float!
}

type ModelBusinessConnection {
 items: [Business]
 total: Int
 nextToken: String
}

type Query {
 nearbyBusinesses(
   location: LocationInput!, 
   m: Int, 
   limit: Int, 
   nextToken: String
 ): ModelBusinessConnection
}
